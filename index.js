// –ò–º–ø–æ—Ä—Ç Telegraf –∏ Markup
const {
  Telegraf,
  Markup,
  Scenes,
  session
} = require('telegraf')

// –ò–º–ø–æ—Ä—Ç dotenv –¥–ª—è –∑–∞—â–∏—Ç—ã API —Ç–æ–∫–µ–Ω–∞
require('dotenv').config()


// –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏
const my_const = require('./const')



// —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
const home3Scene = require('./scenes/Home3.js')
const home1Scene = require('./scenes/Home1.js')
const home2Scene = require('./scenes/Home2.js')
const home4Scene = require('./scenes/Home4.js')





// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é Telegraf
const bot = new Telegraf(process.env.BOT_TOKEN)



//–õ–æ–≥–µ—Ä
bot.use(Telegraf.log())



// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.help((ctx) => ctx.reply(my_const.commands))


// —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
const stage = new Scenes.Stage([home1Scene,home2Scene,home3Scene,home4Scene])

//middleware
bot.use(session())
bot.use(stage.middleware())

/*bot.hears('Home1', async (ctx)=>{
  try{
    await ctx.scene.enter('home1Wizard')
  }catch(e){
    console.log(e)
  }
})
  
bot.hears('Home2', async(ctx)=>{
  try{
   await ctx.scene.enter('home2Wizard')
  }catch(e){
    console.log(e)
  }
  })*/

bot.hears('Home1',ctx=>ctx.scene.enter('home1Wizard'))
bot.hears('Home2',ctx=>ctx.scene.enter('home2Wizard'))
bot.hears('Home3',ctx=>ctx.scene.enter('home3Wizard'))
bot.hears('Home4',ctx=>ctx.scene.enter('home4Wizard'))




// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async(ctx) => {
  try{
    await ctx.reply( 'okey',Markup.keyboard(
      [
        ['Home1','Home2','Home3','Home4']
       
      ]).oneTime().resize())
    } catch(e){
    console.log(e)
  }
  try{
    await ctx.reply(`–ü—Ä–∏–≤–µ—Ç ${ctx.message.from.first_name ? ctx.message.from.first_name : '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü'}! –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–≤–æ–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –º–∏—Ä–µ.–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ —Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É`,Markup.inlineKeyboard(
      [
        [Markup.button.callback('–ì–æ—Ç–æ–≤', 'btn_0')]
      ]

     
    ))
    } catch(e){
      console.log(e)
    }
 
   
})
/*bot.on('menu',async (ctx)=>{
  try{
    await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
  }catch(e){
    comsole.error(e)
  }
})*/

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /button
/*bot.command('button', async (ctx) => {
  try {
    await ctx.reply('ok', Markup.keyboard(
      [
        ['Menu','Back','My']
       
      ]
    ).oneTime().resize())
  } catch (e) {
    console.error(e)
  }
})*/








function addActionBot(id_btn, src_img, text, preview) {
  bot.action(id_btn, async (ctx) => {
    try {
      await ctx.answerCbQuery()
      if (src_img !== false) {
        await ctx.replyWithPhoto({
          source: src_img
        })
      }
      await ctx.replyWithHTML(text, {
        disable_web_page_preview: preview
      })
    } catch (e) {
      console.error(e)
    }
  })
}
/*const markup = Markup.inlineKeyboard([
  Markup.button.game('üéÆ Play now!'),
  Markup.button.url('Telegraf help', 'http://telegraf.js.org')
])*/



// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏
addActionBot('btn_1', './img/1.jpg', my_const.text1, true)
addActionBot('btn_0', './img/2.jpg', my_const.text2, true)
addActionBot('btn_5', './img/2.jpg', my_const.text5, true)
addActionBot('btn_4', false, my_const.text3, false)





// –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
bot.launch()

// –í–∫–ª—é—á–∏—Ç—å –ø–ª–∞–≤–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))


/**
 *? –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–º
 *? @param {String} id_btn –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 *? @param {String} src_img –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –∏–ª–∏ false —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
 *? @param {String} text –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * ?@param {Boolean} preview –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é —É —Å—Å—ã–ª–æ–∫ –∏–ª–∏ –Ω–µ—Ç, true - –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, false - –Ω–µ—Ç
 */
